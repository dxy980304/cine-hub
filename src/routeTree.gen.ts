/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as HomeRouteImport } from "./routes/_home/route";
import { Route as HomeIndexImport } from "./routes/_home/index";
import { Route as HomePlayIdImport } from "./routes/_home/play.$id";

// Create/Update Routes

const HomeRouteRoute = HomeRouteImport.update({
  id: "/_home",
  getParentRoute: () => rootRoute,
} as any);

const HomeIndexRoute = HomeIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => HomeRouteRoute,
} as any);

const HomePlayIdRoute = HomePlayIdImport.update({
  id: "/play/$id",
  path: "/play/$id",
  getParentRoute: () => HomeRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_home": {
      id: "/_home";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof HomeRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_home/": {
      id: "/_home/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof HomeIndexImport;
      parentRoute: typeof HomeRouteImport;
    };
    "/_home/play/$id": {
      id: "/_home/play/$id";
      path: "/play/$id";
      fullPath: "/play/$id";
      preLoaderRoute: typeof HomePlayIdImport;
      parentRoute: typeof HomeRouteImport;
    };
  }
}

// Create and export the route tree

interface HomeRouteRouteChildren {
  HomeIndexRoute: typeof HomeIndexRoute;
  HomePlayIdRoute: typeof HomePlayIdRoute;
}

const HomeRouteRouteChildren: HomeRouteRouteChildren = {
  HomeIndexRoute: HomeIndexRoute,
  HomePlayIdRoute: HomePlayIdRoute,
};

const HomeRouteRouteWithChildren = HomeRouteRoute._addFileChildren(
  HomeRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof HomeRouteRouteWithChildren;
  "/": typeof HomeIndexRoute;
  "/play/$id": typeof HomePlayIdRoute;
}

export interface FileRoutesByTo {
  "/": typeof HomeIndexRoute;
  "/play/$id": typeof HomePlayIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_home": typeof HomeRouteRouteWithChildren;
  "/_home/": typeof HomeIndexRoute;
  "/_home/play/$id": typeof HomePlayIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/" | "/play/$id";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/play/$id";
  id: "__root__" | "/_home" | "/_home/" | "/_home/play/$id";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  HomeRouteRoute: typeof HomeRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  HomeRouteRoute: HomeRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_home"
      ]
    },
    "/_home": {
      "filePath": "_home/route.tsx",
      "children": [
        "/_home/",
        "/_home/play/$id"
      ]
    },
    "/_home/": {
      "filePath": "_home/index.tsx",
      "parent": "/_home"
    },
    "/_home/play/$id": {
      "filePath": "_home/play.$id.tsx",
      "parent": "/_home"
    }
  }
}
ROUTE_MANIFEST_END */
